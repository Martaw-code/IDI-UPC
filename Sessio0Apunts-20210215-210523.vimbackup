

                                                            15/02/2021
                                                            Marta GiM
Apunts Qt

Qt és un framework(això significa que és un software que ja ha set 
desenvolupat i en essència ens ajudarà a crear la nostra aplicació, 
o a facilitar-nos la tasca que volguem fer. És codi reutilitzable i 
que ens aportarà certes funcionalitats que podrem usar en els nostres 
programes. Per tant el fet d'usar un framework, evita que ho haguem de 
fer tot des de 0, ja que a ningú li agradaria tornar a reinventar la 
roda!! A més a més, segur que aquest codi ja ha set revistat i 
optimitzat per divereses persones, així que segurament és 
molt més eficient del que ho podríem fer) que ens permetrà 
dissenyar interfícies gràfiques d'usuari (GUI), recordem que una interfície 
d'usuari és l'espai on succeeix l'interacció entre nosaltres i la màquina, 
són interactius i ens permeten mitjançant elements gràfics, sonors  i de control 
facilitar-nos la interacció amb un sistema informàtic. I.e: un cursor que ens 
permet seleccionar les icones de l'escriptori. A més a més, és cross-platform.

Consistirà en unes biblioteques escrites en C++ que ens proporcionaran diversos 
widgets(windows+gadgets) configurables. Unes minis aplicacions que ens proveeixen 
alguna funcionalitat. O més aviat, cada component de la GUI
(botons, labels, text editor) és un widget que es col·loca en algun lloc de la 
finesta de la interfície d'usuari es mostra en un finestra independent.

Cada tipus de widget és proporcionat per un subclasse de QWidget, que és a la vegada 
una subclasse de QObject.

QWidget l'usarem per crear una finestra i a la vegada posar-hi a dins altres QWidgets. 
Per tant, es pot fer servir de contenidor per posar-hi a dins altres widgets.

Hi ha una certa relació jeràrquica, ja que si el·liminem el widget finestra, o un widget 
"parent", s'eliminaran els widgets "children" que depenien del "parent".

Fitxer .pro conté la descripció del projecte que estem programant. 

.pro -> fitxers de projecte, fet amb un editor de text, llistem els arxius que tenen 
el nostre projecte, i.e, .cpp, .h, .ui

qmake -> genera Makefile a partir del .pro
make -> compila i linkeja el programa 

QT += widgets  #sino no surten els widgets 

#Per executar el PushButton creat.
open -a helloQt.app

#Per netejar la corrupció de fitxers
make dist clean

LAYOUTS: Qt ens proporciona una forma senzilla d'organitzar automàticament
els child widgets d'un widget per garantir que facin un bon ús de l'espai lliure
que els queda. Per tant al fer resize del widget, no tindrem problema.

Tindrem un conjunt de layout classes s'usen per descriure com es distribueixen els
widgets a la GUI. Aquests layouts posicionen i redimensionen els widgets quan la
quantitat d'espai disponible canvia, garantint que estiguin ordenats.


Qt's Layout Classes:

QH(V)BoxLayout: alinea els widgets horitzontal o verticalment respectivament
QGridLayout: distribueix els widgets en un 2D grid


SIGNALS & SLOTS: S'utilitzen per la comunicació entre oobjectes.

Normalment quan un widget canvia d'estat, poster volem que un altre widget
canvïi d'estat també per tant d'alguna forma l'hem de notificar. Li hem d'enviar
alguna senyal perquè al mateix temps es modifiqui, si és aquest el cas. Per
tant, volem que objectes de qualsevol tipus es comuniquin entre ells. Ex: Si
cliquem el button Sortir, probablement volem que es cridi la funció close() de
la finestra. SIGKILL.

pd: SO returns


Per tant, s'emet un signal quan es produeix un esdeveniment concret.
Els widgets tenen molts signals predefinits, o podem afegir els nostres propis
signals.

Un slot és una funció que es cridarà en resposta a un signal en concret.

Els widgets tindran varis slots predefinits, tot i que també podem afegir els
nostres pròpis slots i així podem tractar els siganls que ens interessen.








